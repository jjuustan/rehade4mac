#!/bin/bash

# Function to print error and exit
printErr() {
    echo -e "\033[0;41mError: $1\nExiting.\033[0m" >&2
    removeTempDir
    exit "${2:-1}"
}

# Function to check user input
checkStdin() {
    local prompt="$1"
    local regex="$2"
    local userInput
    while true; do
        read -rp "$prompt" userInput
        if [[ $userInput =~ $regex ]]; then
            echo "$userInput"
            return
        fi
    done
}

# Function to get game directory from user
getGamePath() {
    echo 'Supply the folder path where the main executable for the game is.'
    echo '(Control+C to exit)'
    local gamePath
    while true; do
        read -rp 'Game path: ' gamePath
        gamePath=$(realpath "$gamePath" 2>/dev/null)
        if [[ ! -d $gamePath ]]; then
            echo "Incorrect or empty path supplied. You supplied \"$gamePath\"."
            continue
        fi
        echo "Is this path correct? \"$gamePath\""
        if [[ $(checkStdin "(y/n) " "^(y|n)$") == "y" ]]; then
            echo "$gamePath"
            return
        fi
    done
}

# Function to create temporary directory
createTempDir() {
    tmpDir=$(mktemp -d) || printErr "Failed to create temp directory."
    cd "$tmpDir" || printErr "Failed to change to temp directory."
}

# Function to remove temporary directory
removeTempDir() {
    cd "$MAIN_PATH" || exit 1
    [[ -d $tmpDir ]] && rm -rf "$tmpDir"
}

# Function to download and extract ReShade
downloadReshade() {
    local version="$1"
    local url="$2"
    local exeFile="ReShade_Setup_$version.exe"

    createTempDir
    curl -sLO "$url" || printErr "Could not download version $version of ReShade."
    mv "$exeFile" "$tmpDir/$exeFile" || printErr "Failed to move ReShade installer."

    runReshadeInstaller "$tmpDir/$exeFile" || printErr "Failed to run ReShade installer."

    removeTempDir
}

# Function to run ReShade installer with Wine
runReshadeInstaller() {
    local reshadeExe="$1"
    echo "Running ReShade installer..."
    wine "$reshadeExe" || printErr "Wine failed to execute the installer."
}

# Function to check if Wine is installed
checkWine() {
    if ! command -v wine &> /dev/null; then
        printErr "Wine is not installed. Please install Wine using Homebrew: 'brew install --cask wine-stable'."
    fi
}

# Function to check for required executables
checkDependencies() {
    REQUIRED_EXECUTABLES="curl git grep tar"
    for exec in $REQUIRED_EXECUTABLES; do
        if ! command -v "$exec" &> /dev/null; then
            printErr "Program '$exec' is missing but is required. Please install it using Homebrew: 'brew install $exec'."
        fi
    done
    checkWine
}

# Check for required executables
checkDependencies

# Initialize directories
XDG_DATA_HOME=${XDG_DATA_HOME:-"$HOME/Library/Application Support"}
MAIN_PATH=${MAIN_PATH:-"$XDG_DATA_HOME/reshade"}
RESHADE_PATH="$MAIN_PATH/reshade"
mkdir -p "$MAIN_PATH" "$RESHADE_PATH" "$MAIN_PATH/ReShade_shaders" "$MAIN_PATH/External_shaders" || printErr "Unable to create necessary directories."

# Update ReShade if needed
LASTUPDATED=${LASTUPDATED:-0}
if [[ -f "$MAIN_PATH/LASTUPDATED" ]]; then
    LASTUPDATED=$(cat "$MAIN_PATH/LASTUPDATED")
fi
if [[ ! $LASTUPDATED =~ ^[0-9]+$ ]]; then
    LASTUPDATED=0
fi
if [[ $LASTUPDATED -gt 0 && $(($(date +%s)-LASTUPDATED)) -lt 14400 ]]; then
    UPDATE_RESHADE=0
else
    date +%s > "$MAIN_PATH/LASTUPDATED"
fi

echo -e "------------------------------------------------------------------------------------------------\nReShade installer/updater for macOS games.\n------------------------------------------------------------------------------------------------\n"

# Download and update ReShade
RESHADE_VERSION=${RESHADE_VERSION:-"latest"}
RESHADE_URL="https://reshade.me/downloads/ReShade_Setup_$RESHADE_VERSION.exe"
downloadReshade "$RESHADE_VERSION" "$RESHADE_URL"

echo "ReShade installation complete."
